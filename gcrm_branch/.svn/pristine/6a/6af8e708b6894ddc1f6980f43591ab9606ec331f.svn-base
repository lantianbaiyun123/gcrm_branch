### The file specifies module-specific parameters,
### including building and releasing attributes etc. with that
### we may know how to build or release the module, how to
### build it when it was depended by other modules.

### Information for building by PMO Compile Cluster
###
### PMO Compile Cluster (C.C.) enables engineers do:
###   * distributed compiling (deployed with distcc, ccache etc.)
###   * release to product repository
###
### To compile job, need to specify some options including:
###   build-master-type      Type of build master, temporarily the only
###                          type is 'linux64-STD' (standard scm 64-bit
###                          RHEL AS4). Contact scmtools@ if needing
###                          other types.
###
###   release-path           Path in product repository,
###
###   cleanup-period-on-build-product
###                          Cleanup period on build product repository. 
###                          Set it to '7' means keeping recent outputs
###                          since 7 days ago, counting from the day
###                          when latest build happened. The valid scope is
###                          [1,30]. If it was set as 31 or more, take it 
###                          as 30. Contact scmtools@ if needing longer 
###                          period.
###
###   modules-exposed-as-dependency
###                          For parent directories based release while
###                          modules under the directory are depended
###                          by other modules.
###
###   output-from-CC         Output sent back from Compile Cluster when
###                          finishing building. Multiple outputs are
###                          joined with the blank char ' '. Support
###                          wildcards.
###
###   build-command-on-CC    Build commands executed on Compile Cluster,
###                          joined with "&&" while ";" is not suggested.
###
###   enable-distcc          For C/C++.
###                          Specifies whether enable distcc (Distributed
###                          Compilation) on Compile Cluster.
###
###   enable-ccache          For C/C++.
###                          Specifies whether enable ccache (Compiler Cache)
###                          on Compile Cluster.
###
### Set 'enable-distcc' to 'no' to disable distcc on C.C. Set it to 'yes' to
### enable it and allow distributed compiling on C.C. If there is "make -j <N>"
### in building scripts, it may benefit much from distcc.
###
### Set 'enable-ccache' to 'no' to disable ccache on C.C. Set it to 'safe' or
### 'timemacro-free' to enable it and allow using cached object files on C.C.
### The difference between 'safe' and 'timemacro-free' is that 'timemacro-free'
### set CCACHE_SLOPPINESS to 'time_macros' which may make ccache ignore the
### diffs on BUILD_DATE. If there is nothing changes but BUILD_DATE, it may
### get cache hit with 'timemacro-free' or cache miss with 'safe'. 

### Information for building as other modules' dependency
###   build-command-as-dependency
###                          Specifies how to build the module when it is
###                          to be built as other modules' dependency.
### Normal commands of it may be:
###   make clean;make
###   sh build.sh
###   sh build.sh make
### Set it as null meaning no need to build. If there are no other modules
### depending the module, it is okay to comment-out or delete the line.

### The examples below are intended only to demonstrate how to use this file;
### You probably need to modify some of them before building the module on C.C.
# test
 
[module_info]

build-master-type = linux64-STD
release-path = iit/epct/gcrm
cleanup-period-on-build-product = 15
# modules-exposed-as-dependency=dir1,dir2

output-from-CC = output/
build-command-on-CC = cd iit/epct/gcrm/gcrm && ls -l && sh build.sh
enable-distcc = yes
enable-ccache = safe
